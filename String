#include <_TestVersion>

#if !defined(_STRING_OF_YX_) && _CPP_VERSION_ != 98
#define _STRING_OF_YX_

#include <ostream>
#include <istream>
#include <type_traits>
#include <string>
#include <initializer_list>
#include <ReverseIterator>
#include <Byte>

template <typename T>
using TYPE = T;

#ifdef STD_NAMESPACE
namespace STD_NAMESPACE {
#endif

template <typename T,typename SIZE_TYPE = unsigned long long>
class BasicString {
	static_assert(std::is_same<T,char>::value
		or std::is_same<T,wchar_t>::value
		or std::is_same<T,char32_t>::value
		or std::is_same<T,char16_t>::value,
		"Illegal type");
	static_assert(std::is_same<SIZE_TYPE,unsigned short>::value
		or std::is_same<SIZE_TYPE,unsigned int>::value
		or std::is_same<SIZE_TYPE,unsigned long>::value
		or std::is_same<SIZE_TYPE,unsigned long long>::value,
		"Illegal type");
 public:
	using sizeType             = SIZE_TYPE;
	using charType             = T;
	using iterator             = T*;
	using constIterator        = const T*;
	using reverseIterator      = ReverseIterator<iterator>;
	using constReverseIterator = const reverseIterator;
	const sizeType &length,
		&size,
		&capacity;
	const constIterator &data;
	BasicString() noexcept:
		length(_size),
		size(_size),
		capacity(_capacity),
		data((decltype(data))_data),
		_data(new T[15]),
		_size(0),
		_capacity(15) {
	}
	explicit BasicString(sizeType Cap) noexcept:
		length(_size),
		size(_size),
		capacity(_capacity),
		data((decltype(data))_data),
		_data(new T[Cap]),
		_size(0),
		_capacity(Cap) {
	}
	template <sizeType SIZE>
	BasicString(TYPE<const T[SIZE]> &text) noexcept:
		length(_size),
		size(_size),
		capacity(_capacity),
		data((decltype(data))_data),
		_data(initForText(text)),
		_size(SIZE - 1),
		_capacity(SIZE - 1) {
	}
	BasicString(BasicString&& move) noexcept:
		length(_size),
		size(_size),
		capacity(_capacity),
		data((decltype(data))_data),
		_data(move._data),
		_size(move._size),
		_capacity(move._capacity) {
		move._data = nullptr;
		
		move._size = 0;
		
		move._capacity = 0;
	}
	BasicString(const BasicString& copy) noexcept:
		length(_size),
		size(_size),
		capacity(_capacity),
		data((decltype(data))_data),
		_data(initForCopy(copy)),
		_size(copy._size),
		_capacity(copy._size) {
	}
	template <sizeType SIZE>
	BasicString(TYPE<const volatile T[SIZE]>& arr, sizeType begin, sizeType end) noexcept:
		length(_size),
		size(_size),
		capacity(_capacity),
		data((decltype(data))_data),
		_data(initForArray(arr,begin,end)),
		_size(begin >= SIZE or end <= begin ? 0 : end - begin),
		_capacity(end <= begin ? SIZE : _size) {
	}
	BasicString(const BasicString &txt, sizeType b, sizeType e) noexcept:
	 	length(_size),
	 	size(_size),
	 	capacity(_capacity),
	 	data((decltype(data))_data),
	 	_data(initForString(txt,b,e)),
	 	_size(e <= b ? 0 : e - b),
	 	_capacity(e <= b ? txt.size : _size) {
	}
	BasicString(const std::initializer_list<T> &init) noexcept:
		length(_size),
		size(_size),
		capacity(_capacity),
		data((decltype(data))_data),
		_data(initForInit(init)),
		_size(init.size()),
		_capacity(init.size()) {
	}
	BasicString(const std::basic_string<T> &stxt) noexcept:
		length(_size),
		size(_size),
		capacity(_capacity),
		data((decltype(data))_data),
		_data(initForStdString(stxt)),
		_size(stxt.size()),
		_capacity(stxt.size()) {
	}
	BasicString(sizeType _co, T _c) noexcept:
		length(_size),
		size(_size),
		capacity(_capacity),
		data((decltype(data))_data),
		_data(initForChar(_c,_co)),
		_size(_co),
		_capacity(_co) {
	}
	BasicString(sizeType _co, const BasicString &_tx) noexcept:
		length(_size),
		size(_size),
		capacity(_capacity),
		data((decltype(data))_data),
		_data(initForString(_tx,_co)),
		_size(_tx.size * _co),
		_capacity(_tx.size * _co) {
	}
	constexpr const T* getData() const noexcept {
		return _data;
	}
	constexpr sizeType getLength() const noexcept {
		return _size;
	}
	constexpr sizeType getSize() const noexcept {
		return _size;
	}
	constexpr sizeType getCapacity() const noexcept {
		return _capacity;
	}
	constexpr T& getSecond() const noexcept {
		return _data[_size - 1];
	}
	constexpr T& getFirst() const noexcept {
		return _data[0];
	}
	constexpr iterator begin() const noexcept {
		return _data;
	}
	constexpr iterator end() const noexcept {
		return _data + _size;
	}
	constexpr const iterator cbegin() const noexcept {
		return _data;
	}
	constexpr const iterator cend() const noexcept {
		return _data + _size;
	}
	constexpr reverseIterator rbegin() const noexcept {
	    return end() - 1;
	}
	constexpr reverseIterator rend() const noexcept {
	    return begin() - 1;
	}
	constexpr constReverseIterator crbegin() const noexcept {
	    return end() - 1;
	}
	constexpr constReverseIterator crend() const noexcept {
	    return begin() - 1;
	}
	constexpr T& operator[] (sizeType index) const noexcept {
		return _data[index];
	}
	constexpr bool operator==(const BasicString &e) const noexcept {
		return equals(e);
	}
	constexpr bool operator!=(const BasicString &e) const noexcept {
		return !equals(e);
	}
	constexpr bool operator<(const BasicString &txt) const noexcept {
		return size < txt.size;
	}
	constexpr bool operator<=(const BasicString &txt) const noexcept {
		return size <= txt.size;
	}
	constexpr bool operator>(const BasicString &txt) const noexcept {
		return size > txt.size;
	}
	constexpr bool operator>=(const BasicString &txt) const noexcept {
		return size >= txt.size;
	}
	T& operator*() const noexcept {
		return _data[0];
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	BasicString& appEnd(T c) noexcept {
		return insert(c,size);
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	BasicString& appEnd(const BasicString &txt) noexcept {
		return insert(txt,size);
	}
	template <sizeType SIZE>
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	BasicString& appEnd(TYPE<const T[SIZE]> &rarr) noexcept {
		return insert(rarr,size);
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	BasicString& appBegin(T c) noexcept {
		return insert(c,0);
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	BasicString& appBegin(const BasicString &txt) noexcept {
		return insert(txt,0);
	}
	template <sizeType SIZE>
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	BasicString& appBegin(TYPE<const T[SIZE]> &rarr) noexcept {
		return insert(rarr,0);
	}
	constexpr BasicString copy() const noexcept {
		return *this;
	}
	constexpr bool isNotEmpty() const noexcept {
		return !isEmpty();
	}
	BasicString& insert(T _c, sizeType _in) noexcept {
		if (_in > size)
			return *this;
		if (size == capacity) {
			reNew(_in,_in + 1);
		} else
			for (sizeType i = size;i > _in;--i)
				_data[i] = _data[i - 1];
		_data[_in] = _c;
		++_size;
		return *this;
	}
	BasicString& insert(const BasicString &txt, sizeType _in) noexcept {
		if (_in > size or txt.size == 0)
			return *this;
		if (size + txt.size > capacity) {
			reNew(_in, _in + txt.size, size + txt.size);
		} else
			for (sizeType i = size + (txt.size - 1);i > _in + (txt.size - 1);--i)
				_data[i] = _data[i - txt.size];
		for (sizeType i = _in;i < _in + txt.size;++i)
			_data[i] = txt[i - _in];
		_size += txt.size;
		return *this;
	}
	template <sizeType SIZE>
	BasicString& insert(TYPE<const T[SIZE]> &rarr, sizeType _in) noexcept {
		if (_in > size or SIZE - 1 == 0)
			return *this;
		if (size + SIZE - 1 > capacity) {
			reNew(_in, _in + SIZE - 1, size + SIZE - 1);
		} else
			for (sizeType i = size + (SIZE - 2);i > _in + (SIZE - 2);--i)
				_data[i] = _data[i - (SIZE - 1)];
		for (sizeType i = _in;i < _in + SIZE - 1;++i)
			_data[i] = rarr[i - _in];
		_size += SIZE - 1;
		return *this;
	}
	bool isEmpty() const noexcept {
		if (size == 0)
			return true;
		for (sizeType i = 0;i < size;++i)
			if (_data[i] != 0)
				return false;
		return true;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	void clear() noexcept {
		return void(_size = 0);
	}
	BasicString& reverse(sizeType begin, sizeType end) noexcept {
		if (end <= begin or begin >= size)
			return *this;
		--end;
		for (;end > begin;++begin,--end) {
			T tmp        = _data[begin];
			_data[begin] = _data[end];
			_data[end]   = tmp;
		}
		return *this;
	}
	BasicString& reverse() noexcept {
		return reverse(0,_size);
	}
	bool reLowestcapacity(sizeType cap) noexcept {
		if (cap < _capacity) {
			return true;
		} else {
			reNew(0,0,cap);
			return false;
		};
	}
	sizeType find(T _char, sizeType _b, sizeType _e) const noexcept {
		if (_e <= _b or _b >= size or _e > size)
			return -1;
		for (sizeType i = _b;i < _e;++i)
			if (_data[i] == _char)
				return i;
		return -1;
	}
	constexpr sizeType find(T _c) const noexcept {
		return find(_c,0,size);
	}
	sizeType find(const BasicString &text, sizeType _b, sizeType _e) const noexcept {
		if (text.size == 0)
			return -1;
		for (sizeType i = _b;(i < _e and i < size) and i + text.size <= _e;++i)
			for (sizeType j = i;j < _e and j - i < text.size and _data[j] == text[j - i];++j)
				if (j - i == text.size - 1)
					return i;
		return -1;
	}
	template <sizeType SIZE>
	sizeType find(TYPE<const T[SIZE]> &rarr, sizeType _b, sizeType _e) const noexcept {
		if (SIZE - 1 == 0)
			return -1;
		for (sizeType i = _b;(i < _e and i < size) and i + SIZE - 1 <= _e;++i)
			for (sizeType j = i;j < _e and j - i < SIZE - 1 and _data[j] == rarr[j - i];++j)
				if (j - i == SIZE - 2)
					return i;
		return -1;
	}
	constexpr sizeType find(const BasicString &t) const noexcept {
		return find(t,0,size);
	}
	template <sizeType SIZE>
	constexpr sizeType find(TYPE<const T[SIZE]> &rarr) const noexcept {
		return find(rarr,0,size);
	}
	template <typename F>
	sizeType findIf(F &&fn, sizeType _b, sizeType _e) const noexcept {
		for (sizeType i = _b;i < _e and i < size and i < size;++i)
			if (fn(data + i))
				return i;
		return -1;
	}
	template <typename F>
	constexpr sizeType findIf(F &&fn) const noexcept {
		return findIf(fn,0,size - 1);
	}
	sizeType rightFind(T _c, sizeType _b, sizeType _e) const noexcept {
		if (_e <= _b or _b >= size or _e > size)
			return -1;
		for (sizeType i = _e - 1;i < _e and i >= _b;--i)
			if (_data[i] == _c)
				return i;
		return -1;
	}
	constexpr sizeType rightFind(T _c) const noexcept {
		return rightFind(_c,0,size);
	}
	sizeType rightFind(const BasicString &text, sizeType _b, sizeType _e) const noexcept {
		if (text.size == 0)
			return -1;
		for (sizeType i = _e - text.size + 1;i >= _b and i < _e and i < size;--i) {
			for (sizeType j = i;j < _e and j - i < text.size and _data[j] == text[j - i];++j)
				if (j - i == text.size - 1)
					return i;
		 }
		return -1;
	}
	template <sizeType SIZE>
	sizeType rightFind(TYPE<const T[SIZE]> &rarr, sizeType _b, sizeType _e) const noexcept {
		if (SIZE - 1 == 0)
			return -1;
		for (sizeType i = _e - (SIZE - 2);i >= _b and i < _e and i < size;--i) {
			for (sizeType j = i;j < _e and j - i < SIZE - 1 and _data[j] == rarr[j - i];++j)
				if (j - i == SIZE - 2)
					return i;
		}
		return -1;
	}
	constexpr sizeType rightFind(const BasicString &text) const noexcept {
		return rightFind(text,0,size);
	}
	template <sizeType SIZE>
	constexpr sizeType rightFind(TYPE<const T[SIZE]> &rarr) const noexcept {
		return rightFind(rarr,0,size);
	}
	template <typename F>
	sizeType rightFindIf(F &&fn, sizeType _b, sizeType _e) const noexcept {
		for (sizeType i = _b;i < _e and i < size;++i)
			if (fn(data + i))
				return i;
		return -1;
	}
	template <typename F>
	constexpr sizeType rightFindIf(F &&fn) const noexcept {
		return rightFindIf(fn,0,size);
	}
	sizeType count(T _c, sizeType _b, sizeType _e) const noexcept {
		if (_e <= _b)
			return 0;
		sizeType _count = 0;
		for (sizeType i = _b;i < _e and i < size;) {
			sizeType _res = find(_c,i,_e);
			if (_res != -1) {
				i = (++_count,_res + 1);
			} else
				break;
		}
		return _count;
	}
	constexpr sizeType count(T _c) const noexcept {
		return count(_c,0,size);
	}
	sizeType count(const BasicString &text, sizeType _b, sizeType _e) const noexcept {
		if (_e <= _b or _e < text.size)
			return 0;
		sizeType _count = 0;
		for (sizeType i = _b;i <= _e - text.size and i < size;) {
			sizeType _res = find(text,i,_e);
			if (_res != -1) {
				i = (++_count,_res + text.size);
			} else
				break;
		}
		return _count;	
	}
	template <sizeType SIZE>
	sizeType count(TYPE<const T[SIZE]> &rarr, sizeType _b, sizeType _e) const noexcept {
		if (_e <= _b or _e < SIZE - 1)
			return 0;
		sizeType _count = 0;
		for (sizeType i = _b;i <= _e - (SIZE - 1) and i < size;) {
			sizeType _res = find(rarr,i,_e);
			if (_res != -1) {
				i = (++_count,_res + SIZE - 1);
			} else
				break;
		}
		return _count;	
	}
	constexpr sizeType count(const BasicString &txt) const noexcept {
		return count(txt,0,size);
	}
	template <sizeType SIZE>
	constexpr sizeType count(TYPE<const T[SIZE]> &rarr) const noexcept {
		return count(rarr,0,size);
	}
	sizeType erase(sizeType _in) noexcept {
		if (size == 0 or _in >= size)
			return -1;
		if (_in != size - 1)
			for (sizeType i = _in;i + 1 < size;++i)
				_data[i] = _data[i + 1];
		--_size;
		return 1;
	}
	sizeType erase(sizeType _b, sizeType _e) noexcept {
		if (_e <= _b or _b >= size or size == 0)
			return -1;
		sizeType _s = _e - _b;
		if (_e == size) {
			_size = _b;
			return _s;
		}
		for (sizeType i = _b;i + _s < size;++i)
			_data[i] = _data[i + _s];
		_size -= _s;
		return _s;
	}
	sizeType erase(sizeType b, sizeType e, T c) noexcept {
		if (e <= b or b >= size or size == 0)
			return -1;
		sizeType _count = 0;
		while (true) {
			sizeType _res = find(c,b,e);
			if (_res != -1) {
				erase(_res);
				--e,++_count;
			} else
				break;
		}
		return _count;
	}
	sizeType erase(sizeType b, sizeType e, const BasicString &txt) noexcept {
		if (e <= b or b >= size or size == 0)
			return -1;
		sizeType _count = 0;
		while (true) {
			sizeType _res = find(txt,b,e);
			if (_res != -1) {
				erase(_res,_res + txt.size);
				e -= txt.size,++_count;
			} else
				break;
		}
		return _count;
	}
	template <sizeType SIZE>
	sizeType erase(sizeType b, sizeType e, TYPE<const T[SIZE]> &rarr) noexcept {
		if (e <= b or b >= size or size == 0)
			return -1;
		sizeType _count = 0;
		while (true) {
			sizeType _res = find(rarr,b,e);
			if (_res != -1) {
				erase(_res,_res + SIZE - 1);
				e -= (SIZE - 1,++_count);
			} else
				break;
		}
		return _count;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	sizeType erase(const BasicString &txt) noexcept {
		return erase(0,size,txt);
	}
	template <sizeType SIZE>
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	sizeType erase(TYPE<const T[SIZE]> &rarr) noexcept {
		return erase(0,size,rarr);
	}
	sizeType fill(sizeType _b, sizeType _e , T _c) noexcept {
		if (_e <= _b or size == 0 or _b >= size)
			return -1;
		for (sizeType i = _b;i < _e and i < size;++i)
			_data[i] = _c;
		if (_e <= _b)
			return 0;
		return _e - _b;
	}
	BasicString& replace(T _rep, sizeType b, sizeType e, T _c) noexcept {
		if (b >= size or e <= b)
			return *this;
		for (sizeType i = b;i < e and i < size;++i)
			if (_data[i] == _c)
				_data[i] = _rep;
		return *this;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	BasicString& replace(T r, T c) noexcept {
		return replace(r,0,size,c);
	}
	BasicString& replace(const BasicString &txt, sizeType b, sizeType e, T c) noexcept {
		if (txt.size == 0) {
			erase(c);
			return *this;
		} else if (b >= size or e <= b)
			return *this;
		while (true) {
			auto _res = find(c,b,e);
			if (_res != -1) {
				if (capacity < size + txt.size - 1) {
					reNew(_res, _res + txt.size - 1, size + txt.size - 1);
				} else
					for (sizeType i = e + txt.size - 2;i >= _res + txt.size;--i)
					_data[i] = _data[i - txt.size + 1];
				for (sizeType i = _res;i < _res + txt.size;++i)
					_data[i] = txt[i - _res];
				_size += txt.size - 1;
				b = _res + txt.size;
				e += txt.size - 1;
			} else
				break;
		}
		return *this;
	}
	template <sizeType SIZE>
	BasicString& replace(TYPE<const T[SIZE]> &rarr, sizeType b, sizeType e, T c) noexcept {
		if (SIZE - 1 == 0) {
			erase(c);
			return *this;
		} else if (b >= size or e <= b)
			return *this;
		while (true) {
			auto _res = find(c,b,e);
			if (_res != -1) {
				if (capacity < size + SIZE - 2) {
					reNew(_res, _res + SIZE - 2, size + SIZE - 2);
				} else
					for (sizeType i = e + SIZE - 3;i >= _res + SIZE - 1;--i)
					_data[i] = _data[i - (SIZE - 1) + 1];
				for (sizeType i = _res;i < _res + SIZE - 1;++i)
					_data[i] = rarr[i - _res];
				_size += SIZE - 2;
				b = _res + SIZE - 1;
				e += SIZE - 2;
			} else
				break;
		}
		return *this;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	BasicString& replace(const BasicString &txt, T _c) noexcept {
		return replace(txt,0,size,_c);
	}
	template <sizeType SIZE>
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	BasicString& replace(TYPE<const T[SIZE]> &rarr, T _c) noexcept {
		return replace(rarr,0,size,_c);
	}
	BasicString& replace(const BasicString &txt, sizeType b, sizeType e, const BasicString &str) noexcept {
		if (str.size == 0) {
			return *this;
		} else if (txt.size == 0) {
			erase(str);
			return *this;
		} else if (b >= size or e <= b) {
			return *this;
		}
		while (true) {
			sizeType _res = find(str,b,e);
			if (_res != -1) {
				if (txt.size == str.size) {
					for (sizeType i = _res;i < _res + txt.size;++i)
							_data[i] = txt[i - _res];
					for (sizeType i = _res;i < _res + txt.size;++i)
						_data[i] = txt[i - _res];
					b = _res + txt.size;
				} else if (txt.size > str.size) {
					if (capacity < size + txt.size - str.size) {
						reNew(_res,_res + txt.size - str.size,size + (txt.size - str.size));
					} else
						for (sizeType i = (e + txt.size - str.size) - 1;i >= _res + (txt.size - str.size) + 1;--i)
							_data[i] = _data[i - (txt.size - str.size)];
					for (sizeType i = _res;i < _res + txt.size;++i)
						_data[i] = txt[i - _res];
					_size += (txt.size - str.size);
					b = _res + txt.size;
					e += (txt.size - str.size);
				} else if (txt.size < str.size) {
					erase(_res + txt.size,_res + txt.size + (str.size - txt.size));
					for (sizeType i = _res;i < _res + txt.size;++i)
						_data[i] = txt[i - _res];
					b = _res + txt.size;
					e -= (str.size - txt.size);
				}
			} else
				break;
		}
		return *this;
	}
	template <sizeType SIZE, sizeType SIZE2>
	BasicString& replace(TYPE<const T[SIZE]> &rarr, sizeType b, sizeType e, TYPE<T[SIZE2]> &str) noexcept {
		if (SIZE2 - 1 == 0) {
			return *this;
		} else if (SIZE - 1 == 0) {
			erase(str);
			return *this;
		} else if (b >= size or e <= b) {
			return *this;
		}
		while (true) {
			sizeType _res = find(str,b,e);
			if (_res != -1) {
				if (SIZE - 1 > SIZE2 - 1 and capacity < size + (SIZE - 1) - (SIZE2 - 1)) {
					reNew(0,size + ((SIZE - 1) - (SIZE2 - 1)));
				}
				if (SIZE - 1 == SIZE2 - 1) {
					for (sizeType i = _res;i < _res + SIZE - 1;++i)
						_data[i] = rarr[i - _res];
					for (sizeType i = _res;i < _res + SIZE - 1;++i)
						_data[i] = rarr[i - _res];
					b = _res + SIZE - 1;
				} else if (SIZE - 1 > SIZE2 - 1) {
					if (capacity < size + (SIZE - 1) - (SIZE2 - 1)) {
						reNew(_res,_res + (SIZE - 1) - (SIZE2 - 1),size + ((SIZE - 1) - (SIZE2 - 1)));
					} else
						for (sizeType i = (e + (SIZE - 1) - (SIZE2 - 1)) - 1;i >= _res + ((SIZE - 1) - (SIZE2 - 1)) + 1;--i)
							_data[i] = _data[i - ((SIZE - 1) - (SIZE2 - 1))];
					for (sizeType i = _res;i < _res + SIZE - 1;++i)
						_data[i] = rarr[i - _res];
					_size += ((SIZE - 1) - (SIZE2 - 1));
					b = _res + SIZE - 1;
					e += ((SIZE - 1) - (SIZE2 - 1));
				} else if (SIZE - 1 < SIZE2 - 1) {
					erase(_res + SIZE - 1,_res + SIZE - 1 + ((SIZE2 - 1) - (SIZE - 1)));
					for (sizeType i = _res;i < _res + SIZE - 1;++i)
						_data[i] = rarr[i - _res];
					b = _res + SIZE - 1;
					e -= ((SIZE2 - 1) - (SIZE - 1));
				}
			} else
				break;
		}
		return *this;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	BasicString& replace(const BasicString &txt, const BasicString &str) noexcept {
		return replace(txt,0,size,str);
	}
	template <sizeType SIZE, sizeType SIZE2>
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	BasicString& replace(TYPE<const T[SIZE]> &rarr, TYPE<T[SIZE2]> &str) noexcept {
		return replace(rarr,0,size,str);
	}
	BasicString& toUpperCase(sizeType _b, sizeType _e) noexcept {
		for (sizeType i = _b;i < _e and i < size;++i)
			if (_data[i] >= 97 and _data[i] <= 122)
				_data[i] -= 32;
		return *this;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	BasicString& toUpperCase() noexcept {
		return toUpperCase(0,size);
	}
	BasicString& toLowerCase(sizeType _b, sizeType _e) noexcept {
		for (sizeType i = _b;i < _e and i < size;++i)
			if (_data[i] >= 65 and _data[i] <= 90)
				_data[i] += 32;
		return *this;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	BasicString& toLowerCase() noexcept {
		return toLowerCase(0,size);
	}
	bool isInteger(sizeType _b, sizeType _e) const noexcept {
		bool _n = true;
		for (sizeType i = _b;i < _e and i < size;++i)
			if ((_data[i] == 45 or _data[i] == 43) and _n)
				continue;
			else if (_data[i] >= 48 and _data[i] <= 57)
				_n = false;
			else if (!(_data[i] >= 48 and _data[i] <= 57))
				return false;
		return true;
	}
	constexpr bool isInteger() const noexcept {
		return isInteger(0,size);
	}
	bool hasInteger(sizeType _b, sizeType _e) const noexcept {
		for (sizeType i = _b;i < _e and i < size;++i)
			if (_data[i] >= 48 and _data[i] <= 57)
				return true;
		return false;
	}
	constexpr bool hasInteger() const noexcept {
		return hasInteger(0,size);
	}
	bool isChar(sizeType _b, sizeType _e) const noexcept {
		for (sizeType i = _b;i < _e and i < size;++i)
			if (isInteger(i,i + 1))
				return false;
		return true;
	}
	constexpr bool isChar() const noexcept {
		return isChar(0,size);
	}
	bool hasChar(sizeType _b, sizeType _e) const noexcept {
		for (sizeType i = _b;i < _e and i < size;++i)
			if (!isInteger(i,i + 1))
				return true;
		return false;
	}
	constexpr bool hasChar() const noexcept {
		return hasChar(0,size);
	}
	bool isLetter(sizeType _b, sizeType _e) const noexcept {
		for (sizeType i = _b;i < _e and i < size;++i)
			if (!((_data[i] >= 65 and _data[i] <= 90) or (_data[i] >= 97 and _data[i] <= 122)))
				return false;
		return true;
	}
	constexpr bool isLetter() const noexcept {
		return isLetter(0,size);
	}
	bool hasLetter(sizeType _b, sizeType _e) const noexcept {
		for (sizeType i = _b;i < _e and i < size;++i)
			if ((_data[i] >= 65 and _data[i] <= 90) or (_data[i] >= 97 and _data[i] <= 122))
				return true;
		return false;
	}
	constexpr bool hasLetter() const noexcept {
		return hasLetter(0,size);
	}
	std::string toStdString(sizeType _b, sizeType _e) const noexcept {
		std::string _r;
		for (sizeType i = _b;i < _e;++i)
			_r += _data[i];
		return _r;
	}
	std::string toStdString() const noexcept {
		return toStdString(0,size);
	}
	template <typename IT = int>
	IT toInteger(sizeType b, sizeType e) const noexcept {
		static_assert(std::is_integral<IT>::value
			and !std::is_same<IT,bool>::value,"Illegal type");
		if (!isInteger(b,e))
			return 0;
		bool _smal = false;
		IT _res = 0;
		for (sizeType i = b;i < e and i < size;++i) {
			if (_data[i] == 45) {
				_smal = !_smal;
				continue;
			} else if (_data[i] == 43) {
				continue;
			}
			_res += (-48 + _data[i]);
			if (i < e - 1)
				_res *= 10;
		}
		return _smal ? -_res : _res;
	}
	template <typename IT = int>
	constexpr IT toInteger() const noexcept {
		return toInteger(0,size);
	}
	#if _CPP_VERSION_ >= 17
	template <typename VALUE>
	bool equals(VALUE&& v) const noexcept {
		if constexpr (!std::is_same_v<std::remove_const_t<std::remove_reference_t<decltype(v)>>,BasicString>) {
			return false;
		} else {
			if (size != v.size)
				return false;
			for (sizeType i = 0;i < size;++i)
				if (_data[i] != v[i])
					return false;
		}
		return true;
	}
	#else
	bool equals(const BasicString& v) const noexcept {
		if (size != v.size)
			return false;
		else {
			for (sizeType i = 0;i < size;++i)
				if (_data[i] != v[i])
					return false;
		}
		return true;
	}
	#endif
	template <sizeType SIZE>
	bool equals(TYPE<const T[SIZE]> &rarr) const noexcept {
		if (size != SIZE - 1)
			return false;
		for (sizeType i = 0;i < size;++i)
			if (_data[i] != rarr[i])
				return false;
		return true;
	}
	Byte<> compare(const BasicString &txt) const noexcept {
		if (size < txt.size)
			return -1;
		else if (size > txt.size)
			return 1;
		else
			return 0;
	}
	BasicString& setWidthString(T _c, sizeType _count) noexcept {
		if (_count <= size)
			return *this;
		for (sizeType i = 1;i <= _count - size;++i)
			appBegin(_c);
		return *this;
	}
	template <sizeType SIZE>
	void toCharArray(TYPE<volatile T[SIZE]> &rarr, sizeType b = 0, sizeType e = SIZE) const noexcept {
		for (sizeType i = b;i < e and i < SIZE;++i)
			rarr[i] = _data[i - b];
	}
	template <sizeType MAX = 1024>
	std::basic_istream<T>& getLine(std::basic_istream<T> &cin, sizeType _s, char _end = '\n') noexcept {
		T _txt[MAX] {};
		cin.getline(_txt,_s,_end);
		for (sizeType i = 0;_txt[i] != '\0';++i)
			if (i == MAX or _txt[i + 1] == '\0')
				(*this) = (BasicString(_txt,0,i + 1));
		return *this;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	std::basic_istream<T>& getLine(std::basic_istream<T> &cin) noexcept {
		return getLine(cin,capacity);
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	std::basic_istream<T>& getLine(std::basic_istream<T> &cin,char _e) noexcept {
		return getLine(cin,capacity,_e);
	}
	BasicString& operator=(const BasicString &as) noexcept {
		if (_capacity < as.size)
			reNew(0,0,as.size);
		for (sizeType i = 0;i < as.size;++i)
			_data[i] = as[i];
		_size = as.size;
		return *this;
	}
	template <sizeType SIZE>
	BasicString& operator=(TYPE<const T[SIZE]> &rarr) noexcept {
		if (_capacity < SIZE - 1)
			reNew(0,0,SIZE - 1);
		for (sizeType i = 0;i < SIZE - 1;++i)
			_data[i] = rarr[i];
		_size = SIZE - 1;
		return *this;
	}
	BasicString& operator=(BasicString &&move) noexcept {
		_data   = move._data;
		move._data = nullptr;
		
		_size   = move._size;
		move._size = 0;
		
		_capacity   = move._capacity;
		move._capacity = 0;
		return *this;
	}
	BasicString& operator=(const volatile T *p) noexcept {
		for (sizeType i = 0;p[i];++i) {
			if (p[i + 1] != 0 and i == capacity)
				reNew(0,0);
			else if (!(p[i + 1]))
				_size = i + 1;
			_data[i] = p[i];
		}
		return *this;
	}
	friend auto operator<<(std::basic_ostream<T>& cout, const BasicString& text) noexcept -> decltype(cout)& {
		for (T &i : text)
			if (i != 0)
				cout << i;
		return cout;
	}
	template <sizeType MAX = 1024>
	friend auto operator>>(std::basic_istream<T>& cin, BasicString<T>& text) noexcept -> decltype(cin)& {
		T _txt[MAX] {};
		cin >> _txt;
		for (sizeType i = 0;_txt[i] != '\0';++i)
			if (i == MAX or _txt[i + 1] == '\0')
				text = (BasicString(_txt,0,i + 1));
		return cin;
	}
	template <typename CT = T>
	static BasicString toString(bool _v, bool _t = true) noexcept {
		if (_v) {
			if (_t)
				return "True";
			else
				return "true";
		} else {
			if (_t)
				return "False";
			else
				return "false";
		}
	}
	template <>
	static BasicString toString<wchar_t>(bool _v, bool _t) noexcept {
		if (_v) {
			if (_t)
				return L"True";
			else
				return L"true";
		} else {
			if (_t)
				return L"False";
			else
				return L"false";
		}
	}
	template <>
	static BasicString toString<char16_t>(bool _v, bool _t) noexcept {
		if (_v) {
			if (_t)
				return u"True";
			else
				return u"true";
		} else {
			if (_t)
				return u"False";
			else
				return u"false";
		}
	}
	template <>
	static BasicString toString<char32_t>(bool _v, bool _t) noexcept {
		if (_v) {
			if (_t)
				return U"True";
			else
				return U"true";
		} else {
			if (_t)
				return U"False";
			else
				return U"false";
		}
	}
	static BasicString toString(T _c) noexcept {
		BasicString v;
		v.appEnd(_c);
		return v;
	}
	template <typename IT = int>
	static BasicString toString(IT _value) noexcept {
		static_assert(std::is_integral<IT>::value
			and !std::is_same<IT,bool>::value,"Illegal type");
		BasicString _result;
		bool _sma = false;
		if (_value < 0) {
			_value = -_value;
			_sma = true;
		}
		do {
			_result.appBegin(T(48 + _value % 10));
			_value /= 10;
		} while (_value != 0);
		if (_sma)
			_result.appBegin((T)'-');
		return _result;
	}
	template <typename IT, sizeType SIZE>
	static BasicString toString(TYPE<const volatile IT[SIZE]> &rarr) noexcept {
		BasicString _res = toString((T)'[');
		for (sizeType i = 0;i < SIZE;++i) {
			_res.appEnd(toString(rarr[i]));
			if (i < SIZE - 1)
				_res.appEnd((T)',');
		}
		_res.appEnd((T)']');
		return _res;
	}
	static BasicString toString(const std::basic_string<T> &txt) noexcept {
		BasicString _r(txt.size());
		for (sizeType i = 0;i < txt.size();++i)
			_r[i] = txt[i];
		_r._size = txt.size();
		return _r;
	}
	static BasicString progress(sizeType _max, decltype(_max) _cur = 0, bool _per = true, decltype(_cur) _len = 35, char _bar = '=', char _space = ' ', const BasicString &_tail = BasicString(1,(T)'>'), const BasicString &_start = BasicString(1,(T)'['), const BasicString &_end = BasicString(1,(T)']')) noexcept {
		BasicString _r = _start;
		if (_cur > _max)
			_cur = _max;
		else if (_len == 0) {
			_r.appEnd(_end);
			if (_per)
			    _r.appEnd((T)' ').appEnd(toString(_cur * 100 / _max)).appEnd((T)'%');
			return _r;
		}
		if (_cur == _max) {
		    _r.appEnd(BasicString(_len,(T)_bar)).appEnd(_end);
		    if (_per)
			    _r.appEnd((T)' ').appEnd(toString(_cur * 100 / _max)).appEnd((T)'%');
			return _r;
		} else if (_tail.size > _len) {
			_r.appEnd(BasicString(_len,(T)_space)).appEnd(_end);
			if (_per)
			    _r.appEnd((T)' ').appEnd(toString(_cur * 100 / _max)).appEnd((T)'%');
			   return _r;
		}
		if (_tail.size)
			_r.appEnd(BasicString((_cur * _len / _max) >= _tail.size ? (_cur * _len / _max) - _tail.size : 0,(T)_bar)).appEnd(_tail);
		else
			_r.appEnd(BasicString(_cur * _len / _max,(T)_bar));
		_r.appEnd(BasicString(_len - ((_cur * _len / _max) >= _tail.size ? (_cur * _len / _max) : _tail.size),(T)_space)).appEnd(_end);
		if (_per)
			    _r.appEnd((T)' ').appEnd(toString(_cur * 100 / _max)).appEnd((T)'%');
		return _r;
	}
	~BasicString() {
		if (_data != nullptr)
			delete [] _data;
	}
 private:
	iterator _data;
	sizeType _size,
		_capacity;
	template <sizeType SIZE>
	static T* initForText(TYPE<const T[SIZE]>& text) noexcept {
		T *data = new T[SIZE - 1];
		for (sizeType i = 0;i < SIZE - 1;++i)
			data[i] = text[i];
		return data;
	}
	template <sizeType SIZE>
	static T* initForArray(TYPE<const volatile T[SIZE]> &arr, sizeType begin, sizeType end) noexcept {
		if (end <= begin)
			return new T[SIZE];
		T *data = new T[end - begin];
		for (sizeType i = begin;i < end and i < SIZE;++i)
			data[i - begin] = arr[i];
		return data;
	}
	static T* initForCopy(const BasicString& copy) noexcept {
		T *data = new T[copy._size];
		for (sizeType i = 0;i < copy._size;++i)
			data[i] = copy._data[i];
		return data;
	}
	static T* initForString(const BasicString &txt, sizeType b, sizeType e) noexcept {
		if (e <= b)
			return new T[txt.size];
		T *data = new T[e - b];
		for (sizeType i = b;i < e and i < txt.size;++i)
			data[i - b] = txt[i];
		return data;
	}
	static T* initForInit(const std::initializer_list<T> &ini) noexcept {
		T *data = new T[ini.size()];
		for (sizeType i = 0;i < ini.size();++i)
			data[i] = *(ini.begin() + i);
		return data;
	}
	static T* initForStdString(const std::basic_string<T> &stxt) noexcept {
		T *data = new T[stxt.size()];
		for (sizeType i = 0;i < stxt.size();++i)
			data[i] = stxt[i];
		return data;
	}
	static T* initForChar(T _c, sizeType _cou) noexcept {
		T *data = new T[_cou];
		for (sizeType i = 0;i < _cou;++i)
			data[i] = _c;
		return data;
	}
	static T* initForString(const BasicString &_str, sizeType _cou) noexcept {
		sizeType _s = _str.size * _cou;
		T *data = new T[_s];
		for (sizeType i = 0;i < _s;i += _str.size)
			for (sizeType j = i;j < i + _str.size;++j)
				data[j] = _str[j - i];
		return data;
	}
	void reNew(sizeType in, sizeType in2, sizeType d) noexcept {
		sizeType newCap = (d == 0 ? 15 : (d * 2 - d / 2));
		T *tmp = new T[newCap];
		
		if (in == in2)
			memcpy(tmp,_data,size);
		else {
			memcpy(tmp,_data,in);
			memcpy(tmp + in2,_data + in,size - in);
		}
		
		delete [] _data;
		_data = tmp;
		_capacity = newCap;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	void reNew(sizeType in = 0, sizeType in2 = 0) noexcept {
		reNew(in,in2,_capacity);
	}
};
using String      = BasicString<char>;
using WString     = BasicString<wchar_t>;
using Char32String   = BasicString<char32_t>;
using Char16String   = BasicString<char16_t>;
using WCharString = WString;

#if _CPP_VERSION_ >= 17
template <typename T,typename BasicString<T>::sizeType SIZE>
BasicString(TYPE<const T[SIZE]>&) -> BasicString<T>;
#endif

#ifdef STD_NAMESPACE
}
#endif

#endif