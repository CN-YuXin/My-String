#include <_TestVersion>

#if !defined(_REVERSE_ITERATOR_OF_YX_) && _CPP_VERSION_ != 98
#define _REVERSE_ITERATOR_OF_YX_

#ifdef STD_NAMESPACE
namespace STD_NAMESPACE {
#endif

template <typename T>
class ReverseIterator {
	T it;
  public:
	ReverseIterator(const decltype(it)& v):
		it(v) {
	}
	constexpr operator decltype(it)&() const volatile noexcept {
		return it;
	}
	constexpr operator decltype(it)&() const noexcept {
		return it;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	operator decltype(it)&() volatile noexcept {
		return it;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	operator decltype(it)&() noexcept {
		return it;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	decltype(it) operator++(int) volatile noexcept {
		return it--;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	decltype(it)& operator++() volatile noexcept {
		return --it;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	decltype(it) operator--(int) volatile noexcept {
		return it++;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	decltype(it)& operator--() volatile noexcept {
		return --it;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	decltype(it) operator++(int) noexcept {
		return it--;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	decltype(it)& operator++() noexcept {
		return --it;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	decltype(it) operator--(int) noexcept {
		return it++;
	}
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	decltype(it)& operator--() noexcept {
		return --it;
	}
	template <typename U>
	constexpr decltype(it) operator+(U&& v) const volatile noexcept {
		return it - v;
	}
	template <typename U>
	constexpr decltype(it) operator-(U&& v) const volatile noexcept {
		return it + v;
	}
	template <typename U>
	constexpr decltype(it) operator+(U&& v) const noexcept {
		return it - v;
	}
	template <typename U>
	constexpr decltype(it) operator-(U&& v) const noexcept {
		return it + v;
	}
	template <typename U>
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	decltype(it) operator+(U&& v) volatile noexcept {
		return it - v;
	}
	template <typename U>
	decltype(it) operator-(U&& v) volatile noexcept {
		return it + v;
	}
	template <typename U>
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	decltype(it) operator+(U&& v) noexcept {
		return it - v;
	}
	template <typename U>
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	decltype(it) operator-(U&& v) noexcept {
		return it + v;
	}
	template <typename U>
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	decltype(it)& operator+=(U&& v) volatile noexcept {
		return it -= v;
	}
	template <typename U>
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	decltype(it)& operator+=(U&& v) noexcept {
		return it -= v;
	}
	template <typename U>
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	decltype(it)& operator-=(U&& v) volatile noexcept {
		return it += v;
	}
	template <typename U>
	#if _CPP_VERSION_ >= 14
	    constexpr
	#else
	    inline
	#endif
	decltype(it)& operator-=(U&& v) noexcept {
		return it += v;
	}
};

#ifdef STD_NAMESPACE
}
#endif

#endif